{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Qubership Pipelines Common Library Open-source python library of clients used by Qubership pipelines/modules. Library provides easy-to-use clients and wrappers for common devops services (e.g. Jenkins, MiniO, GitLab Pipelines) Structure Library is presented as a set of clients with predefined operations Auto-generated reference (via mkdocs) is available on this repo's GitHub Pages Installation Add the following section to your dependencies to add Qubership library as a dependency in your project: toml [tool.poetry.dependencies] qubership-pipelines-common-library = \"*\" Or you can install it via pip : bash pip install qubership-pipelines-common-library Backported version There also exists backported to python3.9 version of this library You can install it via pip : pip install qubership-pipelines-common-library-py39 Sample implementation Sample implementation of CLI commands using this library is available at qubership-pipelines-cli-command-samples It includes reference python implementation along with the Development Guide","title":"Home"},{"location":"#qubership-pipelines-common-library","text":"Open-source python library of clients used by Qubership pipelines/modules. Library provides easy-to-use clients and wrappers for common devops services (e.g. Jenkins, MiniO, GitLab Pipelines)","title":"Qubership Pipelines Common Library"},{"location":"#structure","text":"Library is presented as a set of clients with predefined operations Auto-generated reference (via mkdocs) is available on this repo's GitHub Pages","title":"Structure"},{"location":"#installation","text":"Add the following section to your dependencies to add Qubership library as a dependency in your project: toml [tool.poetry.dependencies] qubership-pipelines-common-library = \"*\" Or you can install it via pip : bash pip install qubership-pipelines-common-library","title":"Installation"},{"location":"#backported-version","text":"There also exists backported to python3.9 version of this library You can install it via pip : pip install qubership-pipelines-common-library-py39","title":"Backported version"},{"location":"#sample-implementation","text":"Sample implementation of CLI commands using this library is available at qubership-pipelines-cli-command-samples It includes reference python implementation along with the Development Guide","title":"Sample implementation"},{"location":"clients/","text":"ArtifactoryClient ArtifactoryClient(params: dict ) params is a dictionary with following mandatory params: Parameters: url ( str ) \u2013 Artifactory host url username ( str ) \u2013 User used in auth request password ( str ) \u2013 Token used in auth request get_artifact_properties get_artifact_properties(path_to_artifact: str ) get_folder_files_list get_folder_files_list(path_to_folder: str ) get_artifact_content_by_url get_artifact_content_by_url(path_to_file: str ) GitClient GitClient(host: str , username: str , password: str , email: str = None) Parameters: host ( str ) \u2013 Git instance URL username ( str ) \u2013 User used in auth request password ( str ) \u2013 Token used in auth request email ( str , default: None ) \u2013 Email used when committing changes using client clone clone(repo_path: str , branch: str , temp_path: str , **kwargs) clone_repo_from_commit_hash clone_repo_from_commit_hash(repo_path: str , commit_hash: str , temp_path: str ) commit_and_push commit_and_push(commit_message: str ) commit commit(commit_message: str ) push push() pull pull(**kwargs) get_file_content_utf8 get_file_content_utf8(relative_path: str ) set_file_content_utf8 set_file_content_utf8(relative_path: str , content: str ) delete_by_path delete_by_path(relative_path: str ) GithubClient GithubClient(token: str = None, api_url: str = None, **kwargs) Parameters: token ( str , default: None ) \u2013 Token used in auth request api_url ( str , default: None ) \u2013 Optional Github Enterprise API URL, leave empty if using github.com **kwargs ( Any , default: {} ) \u2013 will be passed into Github API constructor trigger_workflow trigger_workflow(owner: str , repo_name: str , workflow_file_name: str , branch: str , pipeline_params: dict , timeout_seconds: float = 30.0, wait_seconds: float = 3.0, find_via_uuid: bool = False, uuid_param_name: str = DEFAULT_UUID_PARAM_NAME , uuid_artifact_name: str = DEFAULT_UUID_ARTIFACT_NAME , uuid_file_name: str = DEFAULT_UUID_FILE_NAME ) There's currently no reliable way to get ID of triggered workflow, without adding explicit ID as an input parameter to each workflow, dispatch is async and doesn't return anything This method supports two different ways to find and return started workflow: Unreliable - where we start looking for newly created runs of that workflow, filtering them as much as possible (might return wrong run in a concurrent scenario) Reliable: you need to add specific explicit ID param to the workflow you are triggering (e.g. 'workflow_run_uuid'), said workflow should have a step where it will save its input params, and then you run this method with 'find_via_uuid = True' get_workflow_run_status get_workflow_run_status(execution: ExecutionInfo ) wait_workflow_run_execution wait_workflow_run_execution(execution: ExecutionInfo , timeout_seconds: float = 60.0, break_status_list: list = None, wait_seconds: float = 10.0) cancel_workflow_run_execution cancel_workflow_run_execution(execution: ExecutionInfo , timeout: float = 1.0) download_workflow_run_artifacts download_workflow_run_artifacts(execution: ExecutionInfo , local_dir: str ) get_workflow_run_input_params get_workflow_run_input_params(execution: ExecutionInfo , artifact_name: str = DEFAULT_UUID_ARTIFACT_NAME , file_name: str = DEFAULT_UUID_FILE_NAME ) GitlabClient GitlabClient(host: str , username: str , password: str , email: str = None, **kwargs) Parameters: host ( str ) \u2013 Gitlab instance URL username ( str ) \u2013 User used in auth request, might be empty string if no auth is required password ( str ) \u2013 Token used in auth request email ( str , default: None ) \u2013 Email used when committing changes using API **kwargs ( Any , default: {} ) \u2013 will be passed into Gitlab API constructor get_file_content get_file_content(project_id: str , ref: str , file_path: str ) create_file create_file(project_id: str , file_path: str , content: str , ref: str , commit_message: str ) update_file update_file(project_id: str , file_path: str , content: str , ref: str , commit_message: str , create_if_not_exists: bool = False) delete_file delete_file(project_id: str , file_path: str , ref: str , commit_message: str ) get_latest_commit_id get_latest_commit_id(project_id: str , ref: str ) get_file_commit_info get_file_commit_info(project_id: str , ref: str , file_path: str ) Returns dict with 'commit_id' and 'last_commit_id' from Gitlab API trigger_pipeline trigger_pipeline(project_id: str , pipeline_params: dict ) cancel_pipeline_execution cancel_pipeline_execution(execution: ExecutionInfo , timeout: float = 1.0) get_pipeline_status get_pipeline_status(execution: ExecutionInfo ) wait_pipeline_execution wait_pipeline_execution(execution: ExecutionInfo , timeout_seconds: float = 10.0, break_status_list: list = None, wait_seconds: float = 1.0) get_repo_branch_path staticmethod get_repo_branch_path(url: str , branch: str = 'main') Extracts 'repo', 'branch' and 'path' parts from possible Gitlab URLs. Needs to know branch beforehand JenkinsClient JenkinsClient(host: str , user: str , password: str ) Parameters: host ( str ) \u2013 Jenkins host URL user ( str ) \u2013 User used in auth request password ( str ) \u2013 Token used in auth request run_pipeline run_pipeline(job_name: str , job_params: dict , timeout_seconds: float = 180.0, wait_seconds: float = 1.0) get_pipeline_execution_status get_pipeline_execution_status(execution: ExecutionInfo , timeout_seconds: float = 30.0, wait_seconds: float = 1.0) wait_pipeline_execution wait_pipeline_execution(execution: ExecutionInfo , timeout_seconds: float , wait_seconds: float = 1.0) cancel_pipeline_execution cancel_pipeline_execution(execution: ExecutionInfo , timeout_seconds: float = 30.0, wait_seconds: float = 1.0) get_pipeline_execution_artifacts get_pipeline_execution_artifacts(execution: ExecutionInfo , timeout_seconds: float = 30.0, wait_seconds: float = 1.0) Returns list of artifact relative paths save_pipeline_execution_artifact_to_file save_pipeline_execution_artifact_to_file(execution: ExecutionInfo , artifact_path: str , file_path: str ) KubeClient KubeClient(endpoint: str = None, token: str = None, kubeconfig_path: str = None) Needs either of endpoint and token or kubeconfig_path Parameters: endpoint ( str , default: None ) \u2013 Kubernetes API server URL token ( str , default: None ) \u2013 Token used for cluster access kubeconfig_path ( str , default: None ) \u2013 Path to local .kubeconfig file list_namespaces list_namespaces() namespace_exists namespace_exists(namespace: str ) deployments_exist deployments_exist(namespace: str ) is_namespace_scaled_to_zero is_namespace_scaled_to_zero(namespace: str ) list_not_ready_resources list_not_ready_resources(namespace) create_namespace create_namespace(namespace: str ) delete_namespaces delete_namespaces(namespaces: list [ str ], ignore_not_found: bool = False) list_config_map_names list_config_map_names(namespace: str ) read_config_map read_config_map(namespace: str , config_map_name: str ) create_config_map create_config_map(namespace: str , config_map_name: str , config_map_data: dict ) patch_config_map patch_config_map(namespace: str , config_map_name: str , config_map_data: dict ) Patching allows adding/removing only specified keys in config map. Removes key-value pair when value is None replace_config_map replace_config_map(namespace: str , config_map_name: str , config_map_data: dict ) Replaces all data inside existing config map with value of 'config_map_data' argument create_or_replace_config_map create_or_replace_config_map(namespace: str , config_map_name: str , config_map_data: dict ) Creates map if it doesn't exist, replaces it otherwise delete_config_map delete_config_map(namespace: str , config_map_name: str ) scale_namespace scale_namespace(namespace: str , scale_mode: ScaleMode , use_config_map: bool = True, replicas: int = 0) scale_namespace_down scale_namespace_down(namespace: str ) scale_namespace_up scale_namespace_up(namespace: str , use_config_map: bool , replicas: int = 0) MavenArtifactSearcher MavenArtifactSearcher(registry_url: str , params: dict = None, **kwargs) Allows searching for specific maven artifacts in different repositories without knowing full coordinates (e.g. knowing only artifact_id and version , but not its group_id ) Supports different Maven repository providers: Artifactory, Nexus, AWS, GCP Start by initializing this client with one of implementations: maven_client = MavenArtifactSearcher(registry_url).with_artifactory(artifactory_user, artifactory_token) Then find your artifacts using maven_client.find_artifact_urls('art_id', '1.0.0') Additionally, perform filtering of returned results, and then download necessary artifacts with maven_client.download_artifact(one_of_the_returned_urls, './my_artifact.jar') find_artifact_urls find_artifact_urls(artifact_id: str = None, version: str = None, extension: str = 'jar', artifact: Artifact = None) -> list [ str ] Finds and returns list of URLs (or resource IDs, for specific providers) to target artifacts. Client should be initialized with one of providers first. Doesn't require group_id to find artifacts. Works with either artifact_id / version or Artifact class as input parameters. download_artifact download_artifact(url: str , local_path: str ) Downloads maven artifact from url to a local_path location (you need to provide full path, including filename, since we can't determine it from resource urls for some providers). url should be one of values returned by find_artifact_urls . Client should be initialized with one of providers first. with_artifactory with_artifactory(username: str = None, password: str = None) Initializes this client to work with JFrog Artifactory maven repositories. Requires username and its password or token . with_nexus with_nexus(username: str = None, password: str = None) Initializes this client to work with Sonatype Nexus Repository for maven artifacts. Requires username and its password or token . with_aws_code_artifact with_aws_code_artifact(access_key: str , secret_key: str , domain: str , region_name: str , repository: str ) Initializes this client to work with AWS Code Artifact repository. Requires access_key and secret_key of a service account. Also requires domain , region_name and repository of used AWS instance. with_gcp_artifact_registry with_gcp_artifact_registry(credential_params: dict , project: str , region_name: str , repository: str ) Initializes this client to work with Google Cloud Artifact Registry repository. Supports different types of authorization in credential_params dict: - service_account_key key -> requires content of key-file (generate key-file for your service account first) - oidc_token_path and audience key -> path to text file (\"/path/to/token/file.txt\") with your OIDC token and your required audience. Audience should be \"//iam.googleapis.com/projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/providers/PROVIDER_ID\" Also requires project , region_name and repository of used GCP instance. MinioClient MinioClient(endpoint: str , access_key: str , secret_key: str , secure: bool = True, cert_check: bool = True) Parameters: endpoint ( str ) \u2013 MiniO host URL access_key ( str ) \u2013 Access key used in auth request secret_key ( str ) \u2013 Secret key used in auth request secure ( bool , default: True ) \u2013 Which protocol to use (in case it's not present in endpoint ) cert_check ( bool , default: True ) \u2013 Whether to verify certificate list_objects list_objects(bucket_name: str , path: str = None) No leading slash in path - newer versions of MiniO don't support it, Trailing slash in path must be present e.g. don't do this: path=\"/folder1/folder2\" do this: path=\"folder/folder2/\" get_folder_names get_folder_names(bucket_name: str , path: str = None) get_file_names get_file_names(bucket_name: str , path: str = None) get_last_modified_file get_last_modified_file(bucket_name: str , path: str = None) get_last_modified_text_file_content get_last_modified_text_file_content(bucket_name: str , path: str = None) get_file get_file(bucket_name: str , file_path: str , local_path: str ) put_file put_file(bucket_name: str , path: str , local_path: str ) get_text_file_content get_text_file_content(bucket_name: str , file_path: str ) WebexClient WebexClient(bot_token: str , proxies: dict = None) proxies dict for different protocols is passed to requests session. e.g. proxies = { 'https' : 'https://user:password@ip:port' } Parameters: bot_token ( str ) \u2013 bot's auth token proxies ( dict , default: None ) \u2013 dict with proxy connections for different protocols send_message send_message(room_id: str , msg: str = None, attachment_path: str = None, parent_id: str = None, to_person_id: str = None, to_person_email: str = None, markdown: str = None, **request_parameters) Post a message to a room. Parameters: room_id(str) \u2013 The room ID. to_person_id(str) \u2013 The ID of the recipient when sending a private 1:1 message. to_person_email(str) \u2013 The email address of the recipient when sending a private 1:1 message. msg(str) \u2013 The message, in plain text. If markdown is specified this parameter may be optionally used to provide alternate text for UI clients that do not support rich text. markdown(str) \u2013 The message, in Markdown format. attachment_path(str) \u2013 Path to file that will be attached to a message parent_id(str) \u2013 The parent message to reply to. This will start or reply to a thread. **request_parameters \u2013 Additional request parameters (provides support for parameters that may be added in the future).","title":"Clients"},{"location":"clients/#qubership_pipelines_common_library.v1.artifactory_client.ArtifactoryClient","text":"ArtifactoryClient(params: dict ) params is a dictionary with following mandatory params: Parameters: url ( str ) \u2013 Artifactory host url username ( str ) \u2013 User used in auth request password ( str ) \u2013 Token used in auth request","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;ArtifactoryClient"},{"location":"clients/#qubership_pipelines_common_library.v1.artifactory_client.ArtifactoryClient.get_artifact_properties","text":"get_artifact_properties(path_to_artifact: str )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;get_artifact_properties"},{"location":"clients/#qubership_pipelines_common_library.v1.artifactory_client.ArtifactoryClient.get_folder_files_list","text":"get_folder_files_list(path_to_folder: str )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;get_folder_files_list"},{"location":"clients/#qubership_pipelines_common_library.v1.artifactory_client.ArtifactoryClient.get_artifact_content_by_url","text":"get_artifact_content_by_url(path_to_file: str )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;get_artifact_content_by_url"},{"location":"clients/#qubership_pipelines_common_library.v1.git_client.GitClient","text":"GitClient(host: str , username: str , password: str , email: str = None) Parameters: host ( str ) \u2013 Git instance URL username ( str ) \u2013 User used in auth request password ( str ) \u2013 Token used in auth request email ( str , default: None ) \u2013 Email used when committing changes using client","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;GitClient"},{"location":"clients/#qubership_pipelines_common_library.v1.git_client.GitClient.clone","text":"clone(repo_path: str , branch: str , temp_path: str , **kwargs)","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;clone"},{"location":"clients/#qubership_pipelines_common_library.v1.git_client.GitClient.clone_repo_from_commit_hash","text":"clone_repo_from_commit_hash(repo_path: str , commit_hash: str , temp_path: str )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;clone_repo_from_commit_hash"},{"location":"clients/#qubership_pipelines_common_library.v1.git_client.GitClient.commit_and_push","text":"commit_and_push(commit_message: str )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;commit_and_push"},{"location":"clients/#qubership_pipelines_common_library.v1.git_client.GitClient.commit","text":"commit(commit_message: str )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;commit"},{"location":"clients/#qubership_pipelines_common_library.v1.git_client.GitClient.push","text":"push()","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;push"},{"location":"clients/#qubership_pipelines_common_library.v1.git_client.GitClient.pull","text":"pull(**kwargs)","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;pull"},{"location":"clients/#qubership_pipelines_common_library.v1.git_client.GitClient.get_file_content_utf8","text":"get_file_content_utf8(relative_path: str )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;get_file_content_utf8"},{"location":"clients/#qubership_pipelines_common_library.v1.git_client.GitClient.set_file_content_utf8","text":"set_file_content_utf8(relative_path: str , content: str )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;set_file_content_utf8"},{"location":"clients/#qubership_pipelines_common_library.v1.git_client.GitClient.delete_by_path","text":"delete_by_path(relative_path: str )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;delete_by_path"},{"location":"clients/#qubership_pipelines_common_library.v1.github_client.GithubClient","text":"GithubClient(token: str = None, api_url: str = None, **kwargs) Parameters: token ( str , default: None ) \u2013 Token used in auth request api_url ( str , default: None ) \u2013 Optional Github Enterprise API URL, leave empty if using github.com **kwargs ( Any , default: {} ) \u2013 will be passed into Github API constructor","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;GithubClient"},{"location":"clients/#qubership_pipelines_common_library.v1.github_client.GithubClient.trigger_workflow","text":"trigger_workflow(owner: str , repo_name: str , workflow_file_name: str , branch: str , pipeline_params: dict , timeout_seconds: float = 30.0, wait_seconds: float = 3.0, find_via_uuid: bool = False, uuid_param_name: str = DEFAULT_UUID_PARAM_NAME , uuid_artifact_name: str = DEFAULT_UUID_ARTIFACT_NAME , uuid_file_name: str = DEFAULT_UUID_FILE_NAME ) There's currently no reliable way to get ID of triggered workflow, without adding explicit ID as an input parameter to each workflow, dispatch is async and doesn't return anything This method supports two different ways to find and return started workflow: Unreliable - where we start looking for newly created runs of that workflow, filtering them as much as possible (might return wrong run in a concurrent scenario) Reliable: you need to add specific explicit ID param to the workflow you are triggering (e.g. 'workflow_run_uuid'), said workflow should have a step where it will save its input params, and then you run this method with 'find_via_uuid = True'","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;trigger_workflow"},{"location":"clients/#qubership_pipelines_common_library.v1.github_client.GithubClient.get_workflow_run_status","text":"get_workflow_run_status(execution: ExecutionInfo )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;get_workflow_run_status"},{"location":"clients/#qubership_pipelines_common_library.v1.github_client.GithubClient.wait_workflow_run_execution","text":"wait_workflow_run_execution(execution: ExecutionInfo , timeout_seconds: float = 60.0, break_status_list: list = None, wait_seconds: float = 10.0)","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;wait_workflow_run_execution"},{"location":"clients/#qubership_pipelines_common_library.v1.github_client.GithubClient.cancel_workflow_run_execution","text":"cancel_workflow_run_execution(execution: ExecutionInfo , timeout: float = 1.0)","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;cancel_workflow_run_execution"},{"location":"clients/#qubership_pipelines_common_library.v1.github_client.GithubClient.download_workflow_run_artifacts","text":"download_workflow_run_artifacts(execution: ExecutionInfo , local_dir: str )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;download_workflow_run_artifacts"},{"location":"clients/#qubership_pipelines_common_library.v1.github_client.GithubClient.get_workflow_run_input_params","text":"get_workflow_run_input_params(execution: ExecutionInfo , artifact_name: str = DEFAULT_UUID_ARTIFACT_NAME , file_name: str = DEFAULT_UUID_FILE_NAME )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;get_workflow_run_input_params"},{"location":"clients/#qubership_pipelines_common_library.v1.gitlab_client.GitlabClient","text":"GitlabClient(host: str , username: str , password: str , email: str = None, **kwargs) Parameters: host ( str ) \u2013 Gitlab instance URL username ( str ) \u2013 User used in auth request, might be empty string if no auth is required password ( str ) \u2013 Token used in auth request email ( str , default: None ) \u2013 Email used when committing changes using API **kwargs ( Any , default: {} ) \u2013 will be passed into Gitlab API constructor","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;GitlabClient"},{"location":"clients/#qubership_pipelines_common_library.v1.gitlab_client.GitlabClient.get_file_content","text":"get_file_content(project_id: str , ref: str , file_path: str )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;get_file_content"},{"location":"clients/#qubership_pipelines_common_library.v1.gitlab_client.GitlabClient.create_file","text":"create_file(project_id: str , file_path: str , content: str , ref: str , commit_message: str )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;create_file"},{"location":"clients/#qubership_pipelines_common_library.v1.gitlab_client.GitlabClient.update_file","text":"update_file(project_id: str , file_path: str , content: str , ref: str , commit_message: str , create_if_not_exists: bool = False)","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;update_file"},{"location":"clients/#qubership_pipelines_common_library.v1.gitlab_client.GitlabClient.delete_file","text":"delete_file(project_id: str , file_path: str , ref: str , commit_message: str )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;delete_file"},{"location":"clients/#qubership_pipelines_common_library.v1.gitlab_client.GitlabClient.get_latest_commit_id","text":"get_latest_commit_id(project_id: str , ref: str )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;get_latest_commit_id"},{"location":"clients/#qubership_pipelines_common_library.v1.gitlab_client.GitlabClient.get_file_commit_info","text":"get_file_commit_info(project_id: str , ref: str , file_path: str ) Returns dict with 'commit_id' and 'last_commit_id' from Gitlab API","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;get_file_commit_info"},{"location":"clients/#qubership_pipelines_common_library.v1.gitlab_client.GitlabClient.trigger_pipeline","text":"trigger_pipeline(project_id: str , pipeline_params: dict )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;trigger_pipeline"},{"location":"clients/#qubership_pipelines_common_library.v1.gitlab_client.GitlabClient.cancel_pipeline_execution","text":"cancel_pipeline_execution(execution: ExecutionInfo , timeout: float = 1.0)","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;cancel_pipeline_execution"},{"location":"clients/#qubership_pipelines_common_library.v1.gitlab_client.GitlabClient.get_pipeline_status","text":"get_pipeline_status(execution: ExecutionInfo )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;get_pipeline_status"},{"location":"clients/#qubership_pipelines_common_library.v1.gitlab_client.GitlabClient.wait_pipeline_execution","text":"wait_pipeline_execution(execution: ExecutionInfo , timeout_seconds: float = 10.0, break_status_list: list = None, wait_seconds: float = 1.0)","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;wait_pipeline_execution"},{"location":"clients/#qubership_pipelines_common_library.v1.gitlab_client.GitlabClient.get_repo_branch_path","text":"get_repo_branch_path(url: str , branch: str = 'main') Extracts 'repo', 'branch' and 'path' parts from possible Gitlab URLs. Needs to know branch beforehand","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;get_repo_branch_path"},{"location":"clients/#qubership_pipelines_common_library.v1.jenkins_client.JenkinsClient","text":"JenkinsClient(host: str , user: str , password: str ) Parameters: host ( str ) \u2013 Jenkins host URL user ( str ) \u2013 User used in auth request password ( str ) \u2013 Token used in auth request","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;JenkinsClient"},{"location":"clients/#qubership_pipelines_common_library.v1.jenkins_client.JenkinsClient.run_pipeline","text":"run_pipeline(job_name: str , job_params: dict , timeout_seconds: float = 180.0, wait_seconds: float = 1.0)","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;run_pipeline"},{"location":"clients/#qubership_pipelines_common_library.v1.jenkins_client.JenkinsClient.get_pipeline_execution_status","text":"get_pipeline_execution_status(execution: ExecutionInfo , timeout_seconds: float = 30.0, wait_seconds: float = 1.0)","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;get_pipeline_execution_status"},{"location":"clients/#qubership_pipelines_common_library.v1.jenkins_client.JenkinsClient.wait_pipeline_execution","text":"wait_pipeline_execution(execution: ExecutionInfo , timeout_seconds: float , wait_seconds: float = 1.0)","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;wait_pipeline_execution"},{"location":"clients/#qubership_pipelines_common_library.v1.jenkins_client.JenkinsClient.cancel_pipeline_execution","text":"cancel_pipeline_execution(execution: ExecutionInfo , timeout_seconds: float = 30.0, wait_seconds: float = 1.0)","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;cancel_pipeline_execution"},{"location":"clients/#qubership_pipelines_common_library.v1.jenkins_client.JenkinsClient.get_pipeline_execution_artifacts","text":"get_pipeline_execution_artifacts(execution: ExecutionInfo , timeout_seconds: float = 30.0, wait_seconds: float = 1.0) Returns list of artifact relative paths","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;get_pipeline_execution_artifacts"},{"location":"clients/#qubership_pipelines_common_library.v1.jenkins_client.JenkinsClient.save_pipeline_execution_artifact_to_file","text":"save_pipeline_execution_artifact_to_file(execution: ExecutionInfo , artifact_path: str , file_path: str )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;save_pipeline_execution_artifact_to_file"},{"location":"clients/#qubership_pipelines_common_library.v1.kube_client.KubeClient","text":"KubeClient(endpoint: str = None, token: str = None, kubeconfig_path: str = None) Needs either of endpoint and token or kubeconfig_path Parameters: endpoint ( str , default: None ) \u2013 Kubernetes API server URL token ( str , default: None ) \u2013 Token used for cluster access kubeconfig_path ( str , default: None ) \u2013 Path to local .kubeconfig file","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;KubeClient"},{"location":"clients/#qubership_pipelines_common_library.v1.kube_client.KubeClient.list_namespaces","text":"list_namespaces()","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;list_namespaces"},{"location":"clients/#qubership_pipelines_common_library.v1.kube_client.KubeClient.namespace_exists","text":"namespace_exists(namespace: str )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;namespace_exists"},{"location":"clients/#qubership_pipelines_common_library.v1.kube_client.KubeClient.deployments_exist","text":"deployments_exist(namespace: str )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;deployments_exist"},{"location":"clients/#qubership_pipelines_common_library.v1.kube_client.KubeClient.is_namespace_scaled_to_zero","text":"is_namespace_scaled_to_zero(namespace: str )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;is_namespace_scaled_to_zero"},{"location":"clients/#qubership_pipelines_common_library.v1.kube_client.KubeClient.list_not_ready_resources","text":"list_not_ready_resources(namespace)","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;list_not_ready_resources"},{"location":"clients/#qubership_pipelines_common_library.v1.kube_client.KubeClient.create_namespace","text":"create_namespace(namespace: str )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;create_namespace"},{"location":"clients/#qubership_pipelines_common_library.v1.kube_client.KubeClient.delete_namespaces","text":"delete_namespaces(namespaces: list [ str ], ignore_not_found: bool = False)","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;delete_namespaces"},{"location":"clients/#qubership_pipelines_common_library.v1.kube_client.KubeClient.list_config_map_names","text":"list_config_map_names(namespace: str )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;list_config_map_names"},{"location":"clients/#qubership_pipelines_common_library.v1.kube_client.KubeClient.read_config_map","text":"read_config_map(namespace: str , config_map_name: str )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;read_config_map"},{"location":"clients/#qubership_pipelines_common_library.v1.kube_client.KubeClient.create_config_map","text":"create_config_map(namespace: str , config_map_name: str , config_map_data: dict )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;create_config_map"},{"location":"clients/#qubership_pipelines_common_library.v1.kube_client.KubeClient.patch_config_map","text":"patch_config_map(namespace: str , config_map_name: str , config_map_data: dict ) Patching allows adding/removing only specified keys in config map. Removes key-value pair when value is None","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;patch_config_map"},{"location":"clients/#qubership_pipelines_common_library.v1.kube_client.KubeClient.replace_config_map","text":"replace_config_map(namespace: str , config_map_name: str , config_map_data: dict ) Replaces all data inside existing config map with value of 'config_map_data' argument","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;replace_config_map"},{"location":"clients/#qubership_pipelines_common_library.v1.kube_client.KubeClient.create_or_replace_config_map","text":"create_or_replace_config_map(namespace: str , config_map_name: str , config_map_data: dict ) Creates map if it doesn't exist, replaces it otherwise","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;create_or_replace_config_map"},{"location":"clients/#qubership_pipelines_common_library.v1.kube_client.KubeClient.delete_config_map","text":"delete_config_map(namespace: str , config_map_name: str )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;delete_config_map"},{"location":"clients/#qubership_pipelines_common_library.v1.kube_client.KubeClient.scale_namespace","text":"scale_namespace(namespace: str , scale_mode: ScaleMode , use_config_map: bool = True, replicas: int = 0)","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;scale_namespace"},{"location":"clients/#qubership_pipelines_common_library.v1.kube_client.KubeClient.scale_namespace_down","text":"scale_namespace_down(namespace: str )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;scale_namespace_down"},{"location":"clients/#qubership_pipelines_common_library.v1.kube_client.KubeClient.scale_namespace_up","text":"scale_namespace_up(namespace: str , use_config_map: bool , replicas: int = 0)","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;scale_namespace_up"},{"location":"clients/#qubership_pipelines_common_library.v1.maven_client.MavenArtifactSearcher","text":"MavenArtifactSearcher(registry_url: str , params: dict = None, **kwargs) Allows searching for specific maven artifacts in different repositories without knowing full coordinates (e.g. knowing only artifact_id and version , but not its group_id ) Supports different Maven repository providers: Artifactory, Nexus, AWS, GCP Start by initializing this client with one of implementations: maven_client = MavenArtifactSearcher(registry_url).with_artifactory(artifactory_user, artifactory_token) Then find your artifacts using maven_client.find_artifact_urls('art_id', '1.0.0') Additionally, perform filtering of returned results, and then download necessary artifacts with maven_client.download_artifact(one_of_the_returned_urls, './my_artifact.jar')","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;MavenArtifactSearcher"},{"location":"clients/#qubership_pipelines_common_library.v1.maven_client.MavenArtifactSearcher.find_artifact_urls","text":"find_artifact_urls(artifact_id: str = None, version: str = None, extension: str = 'jar', artifact: Artifact = None) -> list [ str ] Finds and returns list of URLs (or resource IDs, for specific providers) to target artifacts. Client should be initialized with one of providers first. Doesn't require group_id to find artifacts. Works with either artifact_id / version or Artifact class as input parameters.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;find_artifact_urls"},{"location":"clients/#qubership_pipelines_common_library.v1.maven_client.MavenArtifactSearcher.download_artifact","text":"download_artifact(url: str , local_path: str ) Downloads maven artifact from url to a local_path location (you need to provide full path, including filename, since we can't determine it from resource urls for some providers). url should be one of values returned by find_artifact_urls . Client should be initialized with one of providers first.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;download_artifact"},{"location":"clients/#qubership_pipelines_common_library.v1.maven_client.MavenArtifactSearcher.with_artifactory","text":"with_artifactory(username: str = None, password: str = None) Initializes this client to work with JFrog Artifactory maven repositories. Requires username and its password or token .","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;with_artifactory"},{"location":"clients/#qubership_pipelines_common_library.v1.maven_client.MavenArtifactSearcher.with_nexus","text":"with_nexus(username: str = None, password: str = None) Initializes this client to work with Sonatype Nexus Repository for maven artifacts. Requires username and its password or token .","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;with_nexus"},{"location":"clients/#qubership_pipelines_common_library.v1.maven_client.MavenArtifactSearcher.with_aws_code_artifact","text":"with_aws_code_artifact(access_key: str , secret_key: str , domain: str , region_name: str , repository: str ) Initializes this client to work with AWS Code Artifact repository. Requires access_key and secret_key of a service account. Also requires domain , region_name and repository of used AWS instance.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;with_aws_code_artifact"},{"location":"clients/#qubership_pipelines_common_library.v1.maven_client.MavenArtifactSearcher.with_gcp_artifact_registry","text":"with_gcp_artifact_registry(credential_params: dict , project: str , region_name: str , repository: str ) Initializes this client to work with Google Cloud Artifact Registry repository. Supports different types of authorization in credential_params dict: - service_account_key key -> requires content of key-file (generate key-file for your service account first) - oidc_token_path and audience key -> path to text file (\"/path/to/token/file.txt\") with your OIDC token and your required audience. Audience should be \"//iam.googleapis.com/projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/providers/PROVIDER_ID\" Also requires project , region_name and repository of used GCP instance.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;with_gcp_artifact_registry"},{"location":"clients/#qubership_pipelines_common_library.v1.minio_client.MinioClient","text":"MinioClient(endpoint: str , access_key: str , secret_key: str , secure: bool = True, cert_check: bool = True) Parameters: endpoint ( str ) \u2013 MiniO host URL access_key ( str ) \u2013 Access key used in auth request secret_key ( str ) \u2013 Secret key used in auth request secure ( bool , default: True ) \u2013 Which protocol to use (in case it's not present in endpoint ) cert_check ( bool , default: True ) \u2013 Whether to verify certificate","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;MinioClient"},{"location":"clients/#qubership_pipelines_common_library.v1.minio_client.MinioClient.list_objects","text":"list_objects(bucket_name: str , path: str = None) No leading slash in path - newer versions of MiniO don't support it, Trailing slash in path must be present e.g. don't do this: path=\"/folder1/folder2\" do this: path=\"folder/folder2/\"","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;list_objects"},{"location":"clients/#qubership_pipelines_common_library.v1.minio_client.MinioClient.get_folder_names","text":"get_folder_names(bucket_name: str , path: str = None)","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;get_folder_names"},{"location":"clients/#qubership_pipelines_common_library.v1.minio_client.MinioClient.get_file_names","text":"get_file_names(bucket_name: str , path: str = None)","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;get_file_names"},{"location":"clients/#qubership_pipelines_common_library.v1.minio_client.MinioClient.get_last_modified_file","text":"get_last_modified_file(bucket_name: str , path: str = None)","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;get_last_modified_file"},{"location":"clients/#qubership_pipelines_common_library.v1.minio_client.MinioClient.get_last_modified_text_file_content","text":"get_last_modified_text_file_content(bucket_name: str , path: str = None)","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;get_last_modified_text_file_content"},{"location":"clients/#qubership_pipelines_common_library.v1.minio_client.MinioClient.get_file","text":"get_file(bucket_name: str , file_path: str , local_path: str )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;get_file"},{"location":"clients/#qubership_pipelines_common_library.v1.minio_client.MinioClient.put_file","text":"put_file(bucket_name: str , path: str , local_path: str )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;put_file"},{"location":"clients/#qubership_pipelines_common_library.v1.minio_client.MinioClient.get_text_file_content","text":"get_text_file_content(bucket_name: str , file_path: str )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;get_text_file_content"},{"location":"clients/#qubership_pipelines_common_library.v1.webex_client.WebexClient","text":"WebexClient(bot_token: str , proxies: dict = None) proxies dict for different protocols is passed to requests session. e.g. proxies = { 'https' : 'https://user:password@ip:port' } Parameters: bot_token ( str ) \u2013 bot's auth token proxies ( dict , default: None ) \u2013 dict with proxy connections for different protocols","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;WebexClient"},{"location":"clients/#qubership_pipelines_common_library.v1.webex_client.WebexClient.send_message","text":"send_message(room_id: str , msg: str = None, attachment_path: str = None, parent_id: str = None, to_person_id: str = None, to_person_email: str = None, markdown: str = None, **request_parameters) Post a message to a room. Parameters: room_id(str) \u2013 The room ID. to_person_id(str) \u2013 The ID of the recipient when sending a private 1:1 message. to_person_email(str) \u2013 The email address of the recipient when sending a private 1:1 message. msg(str) \u2013 The message, in plain text. If markdown is specified this parameter may be optionally used to provide alternate text for UI clients that do not support rich text. markdown(str) \u2013 The message, in Markdown format. attachment_path(str) \u2013 Path to file that will be attached to a message parent_id(str) \u2013 The parent message to reply to. This will start or reply to a thread. **request_parameters \u2013 Additional request parameters (provides support for parameters that may be added in the future).","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;send_message"},{"location":"commands/","text":"ExecutionCommand ExecutionCommand(context_path: str = None, input_params: dict = None, input_params_secure: dict = None, folder_path: str = None, parent_context_to_reuse: ExecutionContext = None) Extendable interface intended to simplify working with input/output params and passing them between commands in different Pipeline Executors Implementations are expected to override _validate and _execute methods If context_path is not provided - context will be created dynamically using other provided params Parameters: context_path ( str , default: None ) \u2013 Path to context-describing yaml, that should contain references to input/output param file locations input_params ( dict , default: None ) \u2013 Non-secure parameters that will be merged into dynamically created params input_params_secure ( dict , default: None ) \u2013 Secure parameters that will be merged into dynamically created params folder_path ( str , default: None ) \u2013 Folder path where dynamically-created context will be stored. Optional, will create new temp folder if missing. parent_context_to_reuse ( ExecutionContext , default: None ) \u2013 Optional, existing context to propagate input params from. run run() Runs command following its lifecycle ExecutionContext ExecutionContext(context_path: str ) Interface that provides references and shortcuts to navigating provided input params, storing any output params, and logging messages. Parameters: context_path ( str ) \u2013 Path to context-describing yaml, that should contain references to input/output param file locations output_params_save output_params_save() Stores output_param files to disk input_param_get input_param_get(path, def_value=None) Gets parameter from provided params files by its param path, supporting dot-separated nested keys (e.g. 'parent_obj.child_obj.param_name') output_param_set output_param_set(path, value) Sets param by path in non-secure output params output_param_secure_set output_param_secure_set(path, value) Sets param by path in secure output params validate validate(names, silent=False) Validates that all provided param names are present among provided param files ExecutionContextFile ExecutionContextFile(path=None) Interface to work with params and context files, used in ExecutionContext . Provides methods to init default content for different types of descriptors (e.g. init_context_descriptor , init_params ) init_empty init_empty() init_context_descriptor init_context_descriptor(context_folder_path: str = None) init_params init_params() init_params_secure init_params_secure() load load(path) Loads and validates file as one of supported types of descriptors save save(path) Writes current file content from memory to disk get get(path, def_value=None) Gets parameter from current file content by its param path, supporting dot-separated nested keys (e.g. 'parent_obj.child_obj.param_name') set set(path, value) Sets parameter in current file content set_multiple set_multiple(dict) Sets multiple parameters in current file content ExecutionInfo ExecutionInfo() Describes trackable running processes (e.g. triggered GitHub workflow) start start() Records start time for described process and transitions its status to IN_PROGRESS stop stop(status: str = None) Records finish time for described process, and optionally transitions its status to passed value get_duration get_duration() Returns duration of this process after it's finished get_duration_str get_duration_str() Returns formatted duration of this process as hh:mm:ss string after it's finished ExecutionLogger ExecutionLogger(path_logs) Default logger used by ExecutionCommands , implicitly initialized when using Context. Reference to it is available from instance of ExecutionContext . Provides common logging methods of different log levels - e.g. debug , info , error utils_cli utils_cli(func) Decorator to add CLI options for logging level, context path and custom input params. create_execution_context create_execution_context(input_params: dict = None, input_params_secure: dict = None, folder_path: str = None, parent_context_to_reuse: ExecutionContext = None) Dynamically creates ExecutionContext using provided params. Parameters: input_params ( dict , default: None ) \u2013 dict (will be merged into created input params) input_params_secure ( dict , default: None ) \u2013 dict (will be merged into created secure input params) folder_path ( str , default: None ) \u2013 str (optional, will generate new temp) parent_context_to_reuse ( ExecutionContext , default: None ) \u2013 ExecutionContext (optional, to propagate existing input params)","title":"Commands"},{"location":"commands/#qubership_pipelines_common_library.v1.execution.exec_command.ExecutionCommand","text":"ExecutionCommand(context_path: str = None, input_params: dict = None, input_params_secure: dict = None, folder_path: str = None, parent_context_to_reuse: ExecutionContext = None) Extendable interface intended to simplify working with input/output params and passing them between commands in different Pipeline Executors Implementations are expected to override _validate and _execute methods If context_path is not provided - context will be created dynamically using other provided params Parameters: context_path ( str , default: None ) \u2013 Path to context-describing yaml, that should contain references to input/output param file locations input_params ( dict , default: None ) \u2013 Non-secure parameters that will be merged into dynamically created params input_params_secure ( dict , default: None ) \u2013 Secure parameters that will be merged into dynamically created params folder_path ( str , default: None ) \u2013 Folder path where dynamically-created context will be stored. Optional, will create new temp folder if missing. parent_context_to_reuse ( ExecutionContext , default: None ) \u2013 Optional, existing context to propagate input params from.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;ExecutionCommand"},{"location":"commands/#qubership_pipelines_common_library.v1.execution.exec_command.ExecutionCommand.run","text":"run() Runs command following its lifecycle","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;run"},{"location":"commands/#qubership_pipelines_common_library.v1.execution.exec_context.ExecutionContext","text":"ExecutionContext(context_path: str ) Interface that provides references and shortcuts to navigating provided input params, storing any output params, and logging messages. Parameters: context_path ( str ) \u2013 Path to context-describing yaml, that should contain references to input/output param file locations","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;ExecutionContext"},{"location":"commands/#qubership_pipelines_common_library.v1.execution.exec_context.ExecutionContext.output_params_save","text":"output_params_save() Stores output_param files to disk","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;output_params_save"},{"location":"commands/#qubership_pipelines_common_library.v1.execution.exec_context.ExecutionContext.input_param_get","text":"input_param_get(path, def_value=None) Gets parameter from provided params files by its param path, supporting dot-separated nested keys (e.g. 'parent_obj.child_obj.param_name')","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;input_param_get"},{"location":"commands/#qubership_pipelines_common_library.v1.execution.exec_context.ExecutionContext.output_param_set","text":"output_param_set(path, value) Sets param by path in non-secure output params","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;output_param_set"},{"location":"commands/#qubership_pipelines_common_library.v1.execution.exec_context.ExecutionContext.output_param_secure_set","text":"output_param_secure_set(path, value) Sets param by path in secure output params","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;output_param_secure_set"},{"location":"commands/#qubership_pipelines_common_library.v1.execution.exec_context.ExecutionContext.validate","text":"validate(names, silent=False) Validates that all provided param names are present among provided param files","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;validate"},{"location":"commands/#qubership_pipelines_common_library.v1.execution.exec_context_file.ExecutionContextFile","text":"ExecutionContextFile(path=None) Interface to work with params and context files, used in ExecutionContext . Provides methods to init default content for different types of descriptors (e.g. init_context_descriptor , init_params )","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;ExecutionContextFile"},{"location":"commands/#qubership_pipelines_common_library.v1.execution.exec_context_file.ExecutionContextFile.init_empty","text":"init_empty()","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;init_empty"},{"location":"commands/#qubership_pipelines_common_library.v1.execution.exec_context_file.ExecutionContextFile.init_context_descriptor","text":"init_context_descriptor(context_folder_path: str = None)","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;init_context_descriptor"},{"location":"commands/#qubership_pipelines_common_library.v1.execution.exec_context_file.ExecutionContextFile.init_params","text":"init_params()","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;init_params"},{"location":"commands/#qubership_pipelines_common_library.v1.execution.exec_context_file.ExecutionContextFile.init_params_secure","text":"init_params_secure()","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;init_params_secure"},{"location":"commands/#qubership_pipelines_common_library.v1.execution.exec_context_file.ExecutionContextFile.load","text":"load(path) Loads and validates file as one of supported types of descriptors","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;load"},{"location":"commands/#qubership_pipelines_common_library.v1.execution.exec_context_file.ExecutionContextFile.save","text":"save(path) Writes current file content from memory to disk","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;save"},{"location":"commands/#qubership_pipelines_common_library.v1.execution.exec_context_file.ExecutionContextFile.get","text":"get(path, def_value=None) Gets parameter from current file content by its param path, supporting dot-separated nested keys (e.g. 'parent_obj.child_obj.param_name')","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;get"},{"location":"commands/#qubership_pipelines_common_library.v1.execution.exec_context_file.ExecutionContextFile.set","text":"set(path, value) Sets parameter in current file content","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;set"},{"location":"commands/#qubership_pipelines_common_library.v1.execution.exec_context_file.ExecutionContextFile.set_multiple","text":"set_multiple(dict) Sets multiple parameters in current file content","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;set_multiple"},{"location":"commands/#qubership_pipelines_common_library.v1.execution.exec_info.ExecutionInfo","text":"ExecutionInfo() Describes trackable running processes (e.g. triggered GitHub workflow)","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;ExecutionInfo"},{"location":"commands/#qubership_pipelines_common_library.v1.execution.exec_info.ExecutionInfo.start","text":"start() Records start time for described process and transitions its status to IN_PROGRESS","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;start"},{"location":"commands/#qubership_pipelines_common_library.v1.execution.exec_info.ExecutionInfo.stop","text":"stop(status: str = None) Records finish time for described process, and optionally transitions its status to passed value","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;stop"},{"location":"commands/#qubership_pipelines_common_library.v1.execution.exec_info.ExecutionInfo.get_duration","text":"get_duration() Returns duration of this process after it's finished","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;get_duration"},{"location":"commands/#qubership_pipelines_common_library.v1.execution.exec_info.ExecutionInfo.get_duration_str","text":"get_duration_str() Returns formatted duration of this process as hh:mm:ss string after it's finished","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-method\"></code>&nbsp;get_duration_str"},{"location":"commands/#qubership_pipelines_common_library.v1.execution.exec_logger.ExecutionLogger","text":"ExecutionLogger(path_logs) Default logger used by ExecutionCommands , implicitly initialized when using Context. Reference to it is available from instance of ExecutionContext . Provides common logging methods of different log levels - e.g. debug , info , error","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-class\"></code>&nbsp;ExecutionLogger"},{"location":"commands/#qubership_pipelines_common_library.v1.utils.utils_cli.utils_cli","text":"utils_cli(func) Decorator to add CLI options for logging level, context path and custom input params.","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-function\"></code>&nbsp;utils_cli"},{"location":"commands/#qubership_pipelines_common_library.v1.utils.utils_context.create_execution_context","text":"create_execution_context(input_params: dict = None, input_params_secure: dict = None, folder_path: str = None, parent_context_to_reuse: ExecutionContext = None) Dynamically creates ExecutionContext using provided params. Parameters: input_params ( dict , default: None ) \u2013 dict (will be merged into created input params) input_params_secure ( dict , default: None ) \u2013 dict (will be merged into created secure input params) folder_path ( str , default: None ) \u2013 str (optional, will generate new temp) parent_context_to_reuse ( ExecutionContext , default: None ) \u2013 ExecutionContext (optional, to propagate existing input params)","title":"<code class=\"doc-symbol doc-symbol-toc doc-symbol-function\"></code>&nbsp;create_execution_context"},{"location":"maven_auth/","text":"Authorizing with maven-client (MavenArtifactSearcher) All existing maven repositories support basic authorization, the only difference is how you go about issuing their tokens. Authorization is required when accessing private repositories, and the same username/token pair could be used in Maven or Gradle JFrog Artifactory JFrog Artifactory supports basic password authentication, so you can just use your technical user's login/password pair params_jfrog = { \"username\": \"x_technical_user\", \"password\": os.getenv('JFROG_TECH_USER_PASSWORD'), \"registry_url\": \"http://192.168.225.129:8081/artifactory/test-mvn-repo\", } maven_searcher = MavenArtifactSearcher(params_jfrog.get(\"registry_url\")).with_artifactory(params_jfrog.get(\"username\"), params_jfrog.get(\"password\")) GitHub Packages To access Maven artifacts stored in GitHub Packages, you need to authenticate with your personal access token. Official documentation on this process is here But to recap, you need to go to your (or your technical user's) account settings: Settings -> Developer Settings -> Personal access tokens -> Tokens (classic) And Generate new token (classic) (token looks like ghp_..... ) GitHub doesn't have a single maven registry, but rather a registry per User/Organization. So for registry URL you need to use either \"https://maven.pkg.github.com/Netcracker/*\" (to navigate all repositories under specified user) or \"https://maven.pkg.github.com/Netcracker/certain_repo_name\" registry_connection_params_github = { \"username\": \"gh_tech_user_login\", \"password\": os.getenv('GH_ACCESS_TOKEN'), \"registry_url\": \"https://maven.pkg.github.com/Netcracker/*\", } Google Cloud GAR (Google Artifact Registry) Official documentation on this process is here You need to use service account key as a credential. So the process is: - Create new Service Account with minimum required roles/permissions to access your Artifact Registry (e.g. \"Artifact Registry Reader\" role) - Create new Service Account Key - and download it (it's a .json file) - base64 encode this file to get your authentication token (e.g. base64 -w 0 your_key.json > encoded_key.txt ) - username should be _json_key_base64 params_gcp = { \"username\": \"_json_key_base64\", \"password\": os.getenv('GAR_ACCESS_TOKEN'), \"registry_url\": \"https://LOCATION-maven.pkg.dev/PROJECT/REPOSITORY\", } maven_searcher = MavenArtifactSearcher(params_gcp.get(\"registry_url\")).with_gcp_artifact_registry({\"service_account_key\": params_gcp.get(\"password\")}, PROJECT, REGION, REPOSITORY) AWS Code Artifact Official AWS documentation is here You access Code Artifact repositories using special temporary token, but it's only valid for up to 12 hours. To use persistent credentials, this library provides utility helper AWSCodeArtifactHelper that can generate token for you using Access + Secret keys and your domain + region. You need to create an IAM User with required policies/permissions ( instructions here ) Get Access Key and Secret Key to this user, you'll need them to generate your temporary authorization token to Code Artifact params_aws = { \"username\": \"aws\", \"password\": AWSCodeArtifactHelper.get_authorization_token( os.getenv('AWS_ACCESS_KEY'), os.getenv('AWS_SECRET_KEY'), \"test-maven-domain\", \"us-east-1\" ), \"registry_url\": \"https://test-maven-domain-123.d.codeartifact.us-east-1.amazonaws.com/maven/test-maven-repo/\", } maven_searcher = MavenArtifactSearcher(params_aws.get(\"registry_url\")).with_aws_code_artifact(os.getenv('AWS_ACCESS_KEY'), os.getenv('AWS_SECRET_KEY'), DOMAIN, REGION, REPOSITORY)","title":"Maven auth"},{"location":"maven_auth/#authorizing-with-maven-client-mavenartifactsearcher","text":"All existing maven repositories support basic authorization, the only difference is how you go about issuing their tokens. Authorization is required when accessing private repositories, and the same username/token pair could be used in Maven or Gradle","title":"Authorizing with maven-client (MavenArtifactSearcher)"},{"location":"maven_auth/#jfrog-artifactory","text":"JFrog Artifactory supports basic password authentication, so you can just use your technical user's login/password pair params_jfrog = { \"username\": \"x_technical_user\", \"password\": os.getenv('JFROG_TECH_USER_PASSWORD'), \"registry_url\": \"http://192.168.225.129:8081/artifactory/test-mvn-repo\", } maven_searcher = MavenArtifactSearcher(params_jfrog.get(\"registry_url\")).with_artifactory(params_jfrog.get(\"username\"), params_jfrog.get(\"password\"))","title":"JFrog Artifactory"},{"location":"maven_auth/#github-packages","text":"To access Maven artifacts stored in GitHub Packages, you need to authenticate with your personal access token. Official documentation on this process is here But to recap, you need to go to your (or your technical user's) account settings: Settings -> Developer Settings -> Personal access tokens -> Tokens (classic) And Generate new token (classic) (token looks like ghp_..... ) GitHub doesn't have a single maven registry, but rather a registry per User/Organization. So for registry URL you need to use either \"https://maven.pkg.github.com/Netcracker/*\" (to navigate all repositories under specified user) or \"https://maven.pkg.github.com/Netcracker/certain_repo_name\" registry_connection_params_github = { \"username\": \"gh_tech_user_login\", \"password\": os.getenv('GH_ACCESS_TOKEN'), \"registry_url\": \"https://maven.pkg.github.com/Netcracker/*\", }","title":"GitHub Packages"},{"location":"maven_auth/#google-cloud-gar-google-artifact-registry","text":"Official documentation on this process is here You need to use service account key as a credential. So the process is: - Create new Service Account with minimum required roles/permissions to access your Artifact Registry (e.g. \"Artifact Registry Reader\" role) - Create new Service Account Key - and download it (it's a .json file) - base64 encode this file to get your authentication token (e.g. base64 -w 0 your_key.json > encoded_key.txt ) - username should be _json_key_base64 params_gcp = { \"username\": \"_json_key_base64\", \"password\": os.getenv('GAR_ACCESS_TOKEN'), \"registry_url\": \"https://LOCATION-maven.pkg.dev/PROJECT/REPOSITORY\", } maven_searcher = MavenArtifactSearcher(params_gcp.get(\"registry_url\")).with_gcp_artifact_registry({\"service_account_key\": params_gcp.get(\"password\")}, PROJECT, REGION, REPOSITORY)","title":"Google Cloud GAR (Google Artifact Registry)"},{"location":"maven_auth/#aws-code-artifact","text":"Official AWS documentation is here You access Code Artifact repositories using special temporary token, but it's only valid for up to 12 hours. To use persistent credentials, this library provides utility helper AWSCodeArtifactHelper that can generate token for you using Access + Secret keys and your domain + region. You need to create an IAM User with required policies/permissions ( instructions here ) Get Access Key and Secret Key to this user, you'll need them to generate your temporary authorization token to Code Artifact params_aws = { \"username\": \"aws\", \"password\": AWSCodeArtifactHelper.get_authorization_token( os.getenv('AWS_ACCESS_KEY'), os.getenv('AWS_SECRET_KEY'), \"test-maven-domain\", \"us-east-1\" ), \"registry_url\": \"https://test-maven-domain-123.d.codeartifact.us-east-1.amazonaws.com/maven/test-maven-repo/\", } maven_searcher = MavenArtifactSearcher(params_aws.get(\"registry_url\")).with_aws_code_artifact(os.getenv('AWS_ACCESS_KEY'), os.getenv('AWS_SECRET_KEY'), DOMAIN, REGION, REPOSITORY)","title":"AWS Code Artifact"}]}